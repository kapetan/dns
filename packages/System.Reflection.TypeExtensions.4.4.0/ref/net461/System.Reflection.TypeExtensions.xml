<?xml version="1.0" encoding="utf-8"?><span>
<doc>
  <assembly>
    <name>System.Reflection.TypeExtensions</name>
  </assembly>
  <members>
    <member name="T:System.Reflection.AssemblyExtensions">
      
    </member>
    <member name="M:System.Reflection.AssemblyExtensions.GetExportedTypes(System.Reflection.Assembly)">
      <param name="assembly"></param>
      <returns></returns>
    </member>
    <member name="M:System.Reflection.AssemblyExtensions.GetModules(System.Reflection.Assembly)">
      <param name="assembly"></param>
      <returns></returns>
    </member>
    <member name="M:System.Reflection.AssemblyExtensions.GetTypes(System.Reflection.Assembly)">
      <param name="assembly"></param>
      <returns></returns>
    </member>
    <member name="T:System.Reflection.EventInfoExtensions">
      
    </member>
    <member name="M:System.Reflection.EventInfoExtensions.GetAddMethod(System.Reflection.EventInfo)">
      <param name="eventInfo"></param>
      <returns></returns>
    </member>
    <member name="M:System.Reflection.EventInfoExtensions.GetAddMethod(System.Reflection.EventInfo,System.Boolean)">
      <param name="eventInfo"></param>
      <param name="nonPublic"></param>
      <returns></returns>
    </member>
    <member name="M:System.Reflection.EventInfoExtensions.GetRaiseMethod(System.Reflection.EventInfo)">
      <param name="eventInfo"></param>
      <returns></returns>
    </member>
    <member name="M:System.Reflection.EventInfoExtensions.GetRaiseMethod(System.Reflection.EventInfo,System.Boolean)">
      <param name="eventInfo"></param>
      <param name="nonPublic"></param>
      <returns></returns>
    </member>
    <member name="M:System.Reflection.EventInfoExtensions.GetRemoveMethod(System.Reflection.EventInfo)">
      <param name="eventInfo"></param>
      <returns></returns>
    </member>
    <member name="M:System.Reflection.EventInfoExtensions.GetRemoveMethod(System.Reflection.EventInfo,System.Boolean)">
      <param name="eventInfo"></param>
      <param name="nonPublic"></param>
      <returns></returns>
    </member>
    <member name="T:System.Reflection.MemberInfoExtensions">
      
    </member>
    <member name="M:System.Reflection.MemberInfoExtensions.GetMetadataToken(System.Reflection.MemberInfo)">
      <param name="member"></param>
      <returns></returns>
    </member>
    <member name="M:System.Reflection.MemberInfoExtensions.HasMetadataToken(System.Reflection.MemberInfo)">
      <param name="member"></param>
      <returns></returns>
    </member>
    <member name="T:System.Reflection.MethodInfoExtensions">
      
    </member>
    <member name="M:System.Reflection.MethodInfoExtensions.GetBaseDefinition(System.Reflection.MethodInfo)">
      <param name="method"></param>
      <returns></returns>
    </member>
    <member name="T:System.Reflection.ModuleExtensions">
      
    </member>
    <member name="M:System.Reflection.ModuleExtensions.GetModuleVersionId(System.Reflection.Module)">
      <param name="module"></param>
      <returns></returns>
    </member>
    <member name="M:System.Reflection.ModuleExtensions.HasModuleVersionId(System.Reflection.Module)">
      <param name="module"></param>
      <returns></returns>
    </member>
    <member name="T:System.Reflection.PropertyInfoExtensions">
      
    </member>
    <member name="M:System.Reflection.PropertyInfoExtensions.GetAccessors(System.Reflection.PropertyInfo)">
      <param name="property"></param>
      <returns></returns>
    </member>
    <member name="M:System.Reflection.PropertyInfoExtensions.GetAccessors(System.Reflection.PropertyInfo,System.Boolean)">
      <param name="property"></param>
      <param name="nonPublic"></param>
      <returns></returns>
    </member>
    <member name="M:System.Reflection.PropertyInfoExtensions.GetGetMethod(System.Reflection.PropertyInfo)">
      <param name="property"></param>
      <returns></returns>
    </member>
    <member name="M:System.Reflection.PropertyInfoExtensions.GetGetMethod(System.Reflection.PropertyInfo,System.Boolean)">
      <param name="property"></param>
      <param name="nonPublic"></param>
      <returns></returns>
    </member>
    <member name="M:System.Reflection.PropertyInfoExtensions.GetSetMethod(System.Reflection.PropertyInfo)">
      <param name="property"></param>
      <returns></returns>
    </member>
    <member name="M:System.Reflection.PropertyInfoExtensions.GetSetMethod(System.Reflection.PropertyInfo,System.Boolean)">
      <param name="property"></param>
      <param name="nonPublic"></param>
      <returns></returns>
    </member>
    <member name="T:System.Reflection.TypeExtensions">
      
    </member>
    <member name="M:System.Reflection.TypeExtensions.GetConstructor(System.Type,System.Type[])">
      <param name="type"></param>
      <param name="types"></param>
      <returns></returns>
    </member>
    <member name="M:System.Reflection.TypeExtensions.GetConstructors(System.Type)">
      <param name="type"></param>
      <returns></returns>
    </member>
    <member name="M:System.Reflection.TypeExtensions.GetConstructors(System.Type,System.Reflection.BindingFlags)">
      <param name="type"></param>
      <param name="bindingAttr"></param>
      <returns></returns>
    </member>
    <member name="M:System.Reflection.TypeExtensions.GetDefaultMembers(System.Type)">
      <param name="type"></param>
      <returns></returns>
    </member>
    <member name="M:System.Reflection.TypeExtensions.GetEvent(System.Type,System.String)">
      <param name="type"></param>
      <param name="name"></param>
      <returns></returns>
    </member>
    <member name="M:System.Reflection.TypeExtensions.GetEvent(System.Type,System.String,System.Reflection.BindingFlags)">
      <param name="type"></param>
      <param name="name"></param>
      <param name="bindingAttr"></param>
      <returns></returns>
    </member>
    <member name="M:System.Reflection.TypeExtensions.GetEvents(System.Type)">
      <param name="type"></param>
      <returns></returns>
    </member>
    <member name="M:System.Reflection.TypeExtensions.GetEvents(System.Type,System.Reflection.BindingFlags)">
      <param name="type"></param>
      <param name="bindingAttr"></param>
      <returns></returns>
    </member>
    <member name="M:System.Reflection.TypeExtensions.GetField(System.Type,System.String,System.Reflection.BindingFlags)">
      <param name="type"></param>
      <param name="name"></param>
      <param name="bindingAttr"></param>
      <returns></returns>
    </member>
    <member name="M:System.Reflection.TypeExtensions.GetField(System.Type,System.String)">
      <param name="type"></param>
      <param name="name"></param>
      <returns></returns>
    </member>
    <member name="M:System.Reflection.TypeExtensions.GetFields(System.Type)">
      <param name="type"></param>
      <returns></returns>
    </member>
    <member name="M:System.Reflection.TypeExtensions.GetFields(System.Type,System.Reflection.BindingFlags)">
      <param name="type"></param>
      <param name="bindingAttr"></param>
      <returns></returns>
    </member>
    <member name="M:System.Reflection.TypeExtensions.GetGenericArguments(System.Type)">
      <param name="type"></param>
      <returns></returns>
    </member>
    <member name="M:System.Reflection.TypeExtensions.GetInterfaces(System.Type)">
      <param name="type"></param>
      <returns></returns>
    </member>
    <member name="M:System.Reflection.TypeExtensions.GetMember(System.Type,System.String)">
      <param name="type"></param>
      <param name="name"></param>
      <returns></returns>
    </member>
    <member name="M:System.Reflection.TypeExtensions.GetMember(System.Type,System.String,System.Reflection.BindingFlags)">
      <param name="type"></param>
      <param name="name"></param>
      <param name="bindingAttr"></param>
      <returns></returns>
    </member>
    <member name="M:System.Reflection.TypeExtensions.GetMembers(System.Type,System.Reflection.BindingFlags)">
      <param name="type"></param>
      <param name="bindingAttr"></param>
      <returns></returns>
    </member>
    <member name="M:System.Reflection.TypeExtensions.GetMembers(System.Type)">
      <param name="type"></param>
      <returns></returns>
    </member>
    <member name="M:System.Reflection.TypeExtensions.GetMethod(System.Type,System.String)">
      <param name="type"></param>
      <param name="name"></param>
      <returns></returns>
    </member>
    <member name="M:System.Reflection.TypeExtensions.GetMethod(System.Type,System.String,System.Reflection.BindingFlags)">
      <param name="type"></param>
      <param name="name"></param>
      <param name="bindingAttr"></param>
      <returns></returns>
    </member>
    <member name="M:System.Reflection.TypeExtensions.GetMethod(System.Type,System.String,System.Type[])">
      <param name="type"></param>
      <param name="name"></param>
      <param name="types"></param>
      <returns></returns>
    </member>
    <member name="M:System.Reflection.TypeExtensions.GetMethods(System.Type)">
      <param name="type"></param>
      <returns></returns>
    </member>
    <member name="M:System.Reflection.TypeExtensions.GetMethods(System.Type,System.Reflection.BindingFlags)">
      <param name="type"></param>
      <param name="bindingAttr"></param>
      <returns></returns>
    </member>
    <member name="M:System.Reflection.TypeExtensions.GetNestedType(System.Type,System.String,System.Reflection.BindingFlags)">
      <param name="type"></param>
      <param name="name"></param>
      <param name="bindingAttr"></param>
      <returns></returns>
    </member>
    <member name="M:System.Reflection.TypeExtensions.GetNestedTypes(System.Type,System.Reflection.BindingFlags)">
      <param name="type"></param>
      <param name="bindingAttr"></param>
      <returns></returns>
    </member>
    <member name="M:System.Reflection.TypeExtensions.GetProperties(System.Type)">
      <param name="type"></param>
      <returns></returns>
    </member>
    <member name="M:System.Reflection.TypeExtensions.GetProperties(System.Type,System.Reflection.BindingFlags)">
      <param name="type"></param>
      <param name="bindingAttr"></param>
      <returns></returns>
    </member>
    <member name="M:System.Reflection.TypeExtensions.GetProperty(System.Type,System.String)">
      <param name="type"></param>
      <param name="name"></param>
      <returns></returns>
    </member>
    <member name="M:System.Reflection.TypeExtensions.GetProperty(System.Type,System.String,System.Reflection.BindingFlags)">
      <param name="type"></param>
      <param name="name"></param>
      <param name="bindingAttr"></param>
      <returns></returns>
    </member>
    <member name="M:System.Reflection.TypeExtensions.GetProperty(System.Type,System.String,System.Type)">
      <param name="type"></param>
      <param name="name"></param>
      <param name="returnType"></param>
      <returns></returns>
    </member>
    <member name="M:System.Reflection.TypeExtensions.GetProperty(System.Type,System.String,System.Type,System.Type[])">
      <param name="type"></param>
      <param name="name"></param>
      <param name="returnType"></param>
      <param name="types"></param>
      <returns></returns>
    </member>
    <member name="M:System.Reflection.TypeExtensions.IsAssignableFrom(System.Type,System.Type)">
      <param name="type"></param>
      <param name="c"></param>
      <returns></returns>
    </member>
    <member name="M:System.Reflection.TypeExtensions.IsInstanceOfType(System.Type,System.Object)">
      <param name="type"></param>
      <param name="o"></param>
      <returns></returns>
    </member>
  </members>
</doc></span>